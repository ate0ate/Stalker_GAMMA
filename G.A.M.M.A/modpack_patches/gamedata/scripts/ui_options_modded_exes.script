function init_opt_base()
	-- printf("working?")

	local options = {
		id = "modded_exes",
		sh = true,
		gr = {
			{
				id = "slide_modded_exes",
				type = "slide",
				link = "ui_options_slider_other",
				text = "ui_mm_title_modded_exes",
				size = { 512, 50 },
			},

			-- Input
			{
				id = "mouse_sens_vertical",
				type = "track",
				val = 2,
				def = 1,
				min = 0.1,
				max = 3,
				step = 0.01,
				cmd = "mouse_sens_vertical",
			},

			{ id = "divider", type = "line" },
			
			-- 3D Shader scopes
			{
                id = "r__3Dfakescope",
                type = "list",
                val = 0,
                curr = {function() return get_console_cmd(0, "r__3Dfakescope") end},
                content = {function() return {{"1", "ON"}, {"0", "OFF"}} end},
                cmd = "r__3Dfakescope",
            },

            { id = "divider", type = "line" },

			-- Shader scopes
			{
				id = "sds_enable",
				type = "check",
				val = 1,
				def = true,
				cmd = "sds_enable",
			},
			{
				id = "sds_speed_enable",
				type = "check",
				val = 1,
				def = true,
				cmd = "sds_speed_enable",
			},
			{
				id = "sds_zoom_enable",
				type = "check",
				val = 1,
				def = true,
				cmd = "sds_zoom_enable",
			},
			{
				id = "new_zoom_enable",
				type = "check",
				val = 1,
				def = true,
				cmd = "new_zoom_enable",
			},
			{
				id = "new_zoom_delta_algorithm",
				type = "list",
				val = 0,
				curr = {function() return get_console_cmd(0, "new_zoom_delta_algorithm") end},
				content = {function() return {{"1", "ON"}, {"0", "OFF"}} end},
				cmd = "new_zoom_delta_algorithm",
			},
			{
				id = "zoom_step_count",
				type = "track",
				val = 2,
				def = 3,
				min = 1,
				max = 10,
				step = 1,
				cmd = "zoom_step_count",
			},
			{
				id = "scope_blur_inner",
				type = "track",
				val = 2,
				def = 0.1,
				min = 0,
				max = 1,
				step = 0.05,
				cmd = "scope_blur_inner",
			},
			{
				id = "scope_blur_outer",
				type = "track",
				val = 2,
				def = 1,
				min = 0,
				max = 1,
				step = 0.05,
				cmd = "scope_blur_outer",
			},
			{
				id = "scope_brightness",
				type = "track",
				val = 2,
				def = 1,
				min = 0,
				max = 1,
				step = 0.05,
				cmd = "scope_brightness",
			},
			{
				id = "scope_ca",
				type = "track",
				val = 2,
				def = 0.003,
				min = 0,
				max = 0.01,
				step = 0.0005,
				cmd = "scope_ca",
			},
			{
				id = "scope_fog_radius",
				type = "track",
				val = 2,
				def = 0.9,
				min = 0.5,
				max = 1.5,
				step = 0.05,
				cmd = "scope_fog_radius",
			},
			{
				id = "scope_fog_interp",
				type = "track",
				val = 2,
				def = 0.2,
				min = 0.05,
				max = 0.25,
				step = 0.01,
				cmd = "scope_fog_interp",
			},
			{
				id = "scope_fog_sharp",
				type = "track",
				val = 2,
				def = 8,
				min = 2,
				max = 20,
				step = 1,
				cmd = "scope_fog_sharp",
			},
			{
				id = "scope_fog_swayAim",
				type = "track",
				val = 2,
				def = 3.2,
				min = 0.8,
				max = 5,
				step = 0.1,
				cmd = "scope_fog_swayAim",
			},
			{
				id = "scope_fog_swayMove",
				type = "track",
				val = 2,
				def = 1.5,
				min = 0.5,
				max = 3,
				step = 0.1,
				cmd = "scope_fog_swayMove",
			},
			{
				id = "scope_fog_travel",
				type = "track",
				val = 2,
				def = 1,
				min = 0.2,
				max = 2,
				step = 0.1,
				cmd = "scope_fog_travel",
			},

			{ id = "divider", type = "line" },

			-- Particles
			{
				id = "particle_update_mod",
				type = "track",
				val = 2,
				def = 1,
				min = 0.04,
				max = 1,
				step = 0.01,
				cmd = "particle_update_mod",
			},
			{
				id = "render_short_tracers",
				type = "list",
				val = 0,
				curr = {function() return get_console_cmd(0, "render_short_tracers") end},
				content = {function() return {{"1", "ON"}, {"0", "OFF"}} end},
				cmd = "render_short_tracers",
			},
			{
				id = "allow_silencer_hide_tracer",
				type = "list",
				val = 0,
				curr = {function() return get_console_cmd(0, "allow_silencer_hide_tracer") end},
				content = {function() return {{"1", "ON"}, {"0", "OFF"}} end},
				cmd = "allow_silencer_hide_tracer",
			},

			{ id = "divider", type = "line" },

			-- PDA
			{
				id = "pda_map_zoom_in_to_mouse",
				type = "list",
				val = 0,
				curr = {function() return get_console_cmd(0, "pda_map_zoom_in_to_mouse") end},
				content = {function() return {{"1", "ON"}, {"0", "OFF"}} end},
				cmd = "pda_map_zoom_in_to_mouse",
				restart = false,
			},
			{
				id = "pda_map_zoom_out_to_mouse",
				type = "list",
				val = 0,
				curr = {function() return get_console_cmd(0, "pda_map_zoom_out_to_mouse") end},
				content = {function() return {{"1", "ON"}, {"0", "OFF"}} end},
				cmd = "pda_map_zoom_out_to_mouse",
				restart = false,
			},

			{ id = "divider", type = "line" },

			-- QoL
			{
				id = "freelook_cam_limit",
				type = "track",
				val = 2,
				def = 1.57,
				min = 0,
				max = 3.14,
				step = 0.01,
				cmd = "freelook_cam_limit",
			},
			{
				id = "monster_stuck_fix",
				type = "list",
				val = 0,
				curr = {function() return get_console_cmd(0, "monster_stuck_fix") end},
				content = {function() return {{"1", "ON"}, {"0", "OFF"}} end},
				cmd = "monster_stuck_fix",
				restart = true,
			},
			{
				id = "mouse_wheel_change_weapon",
				type = "list",
				val = 0,
				curr = {function() return get_console_cmd(0, "mouse_wheel_change_weapon") end},
				content = {function() return {{"1", "ON"}, {"0", "OFF"}} end},
				cmd = "mouse_wheel_change_weapon",
				restart = false,
			},
			{
				id = "mouse_wheel_invert_zoom",
				type = "list",
				val = 0,
				curr = {function() return get_console_cmd(0, "mouse_wheel_invert_zoom") end},
				content = {function() return {{"1", "ON"}, {"0", "OFF"}} end},
				cmd = "mouse_wheel_invert_zoom",
				restart = false,
			},
			{
				id = "use_english_text_for_missing_translations",
				type = "list",
				val = 0,
				curr = {function() return get_console_cmd(0, "use_english_text_for_missing_translations") end},
				content = {function() return {{"1", "ON"}, {"0", "OFF"}} end},
				cmd = "use_english_text_for_missing_translations",
				restart = true,
			},
			{
				id = "crash_save",
				type = "list",
				val = 0,
				curr = {function() return get_console_cmd(0, "crash_save") end},
				content = {function() return {{"1", "ON"}, {"0", "OFF"}} end},
				cmd = "crash_save",
			},
			{
				id = "crash_save_count",
				type = "track",
				val = 2,
				def = 10,
				min = 1,
				max = 20,
				step = 1,
				cmd = "crash_save_count",
			},

			{ id = "divider", type = "line" },

			-- Sounds
			{
				id = "snd_doppler_power",
				type = "track",
				val = 2,
				def = 1.8,
				min = 0,
				max = 5,
				step = 0.1,
				cmd = "snd_doppler_power",
			},
			{
				id = "snd_doppler_smoothing",
				type = "track",
				val = 2,
				def = 15,
				min = 1,
				max = 100,
				step = 1,
				cmd = "snd_doppler_smoothing",
			},

			{ id = "divider", type = "line" },

			-- Gameplay
			{
				id = "first_person_death",
				type = "list",
				val = 0,
				curr = {function() return get_console_cmd(0, "first_person_death") end},
				content = {function() return {{"1", "ON"}, {"0", "OFF"}} end},
				cmd = "first_person_death",
			},
			{
				id = "first_person_death_position_smoothing",
				type = "track",
				val = 2,
				def = 6,
				min = 1,
				max = 30,
				step = 1,
				cmd = "first_person_death_position_smoothing",
			},
			{
				id = "first_person_death_direction_smoothing",
				type = "track",
				val = 2,
				def = 12,
				min = 1,
				max = 30,
				step = 1,
				cmd = "first_person_death_direction_smoothing",
			},
			{
				id = "heat_vision_zombie_cold",
				type = "list",
				val = 0,
				curr = {function() return get_console_cmd(0, "heat_vision_zombie_cold") end},
				content = {function() return {{"1", "ON"}, {"0", "OFF"}} end},
				cmd = "heat_vision_zombie_cold",
			},
			{
				id = "pseudogiant_can_damage_objects_on_stomp",
				type = "list",
				val = 0,
				curr = {function() return get_console_cmd(0, "pseudogiant_can_damage_objects_on_stomp") end},
				content = {function() return {{"1", "ON"}, {"0", "OFF"}} end},
				cmd = "pseudogiant_can_damage_objects_on_stomp",
			},
			{
				id = "telekinetic_objects_include_corpses",
				type = "list",
				val = 0,
				curr = {function() return get_console_cmd(0, "telekinetic_objects_include_corpses") end},
				content = {function() return {{"1", "ON"}, {"0", "OFF"}} end},
				cmd = "telekinetic_objects_include_corpses",
			},
			{
				id = "allow_outfit_control_inertion_factor",
				type = "list",
				val = 0,
				curr = {function() return get_console_cmd(0, "allow_outfit_control_inertion_factor") end},
				content = {function() return {{"1", "ON"}, {"0", "OFF"}} end},
				cmd = "allow_outfit_control_inertion_factor",
			},
			{
				id = "allow_weapon_control_inertion_factor",
				type = "list",
				val = 0,
				curr = {function() return get_console_cmd(0, "allow_weapon_control_inertion_factor") end},
				content = {function() return {{"1", "ON"}, {"0", "OFF"}} end},
				cmd = "allow_weapon_control_inertion_factor",
			},
			{
				id = "fix_avelocity_spread",
				type = "list",
				val = 0,
				curr = {function() return get_console_cmd(0, "fix_avelocity_spread") end},
				content = {function() return {{"1", "ON"}, {"0", "OFF"}} end},
				cmd = "fix_avelocity_spread",
			},
			{
				id = "apply_pdm_to_ads",
				type = "list",
				val = 0,
				curr = {function() return get_console_cmd(0, "apply_pdm_to_ads") end},
				content = {function() return {{"1", "ON"}, {"0", "OFF"}} end},
				cmd = "apply_pdm_to_ads",
			},
			{
				id = "smooth_ads_transition",
				type = "list",
				val = 0,
				curr = {function() return get_console_cmd(0, "smooth_ads_transition") end},
				content = {function() return {{"1", "ON"}, {"0", "OFF"}} end},
				cmd = "smooth_ads_transition",
			},

			{ id = "divider", type = "line" },

			-- HDR10
			{
				id = "hdr10_enabled",
				type = "list",
				val = 0,
				curr = {function() return get_console_cmd(0, "r4_hdr10_on") end},
				content = {function() return {{"1", "ON"}, {"0", "OFF"}} end},
				cmd = "r4_hdr10_on",
				restart = true,
			},
			{id = "hdr10_live_editing", type = "button", functor_ui = {function(self) return this.start_hdr_live_editing_ui(self) end}, precondition = {function() return this.level_present() and get_console_cmd(1, "r4_hdr10_on") end}},
			{
				id = "hdr10_whitepoint_nits",
				tag = "hdr10",
				type = "track",
				val = 2,
				def = 400,
				min = 100,
				max = 10000,
				step = 10,
				cmd = "r4_hdr10_whitepoint_nits",
			},
			{
				id = "hdr10_ui_nits",
				tag = "hdr10",
				type = "track",
				val = 2,
				def = 400,
				min = 100,
				max = 10000,
				step = 10,
				cmd = "r4_hdr10_ui_nits",
			},
			{
				id = "hdr10_pda_intensity",
				tag = "hdr10",
				type = "track",
				val = 2,
				def = 1,
				min = 0.1,
				max = 2,
				step = 0.01,
				cmd = "r4_hdr10_pda_intensity",
			},
			{
				id = "hdr10_colorspace",
				tag = "hdr10",
				type = "list",
				val = 0,
				curr = {function() return get_console_cmd(0, "r4_hdr10_colorspace") end},
				content = {function() return {{"0", "hdr10_colorspace_rec709"}, {"1", "hdr10_colorspace_p3d65"}, {"2", "hdr10_colorspace_rec2020"}} end},
				cmd = "r4_hdr10_colorspace",
			},
			{
				id = "hdr10_tonemapper",
				tag = "hdr10",
				type = "list",
				val = 0,
				curr = {function() return get_console_cmd(0, "r4_hdr10_tonemapper") end},
				content = {
					function() return
					{
						{"0", "hdr10_tonemapper_aces_narkowicz"},
						{"1", "hdr10_tonemapper_aces_hill"},
						{"2", "hdr10_tonemapper_agx_normal"},
						{"3", "hdr10_tonemapper_agx_punchy"},
						{"4", "hdr10_tonemapper_uchimura"},
						{"5", "hdr10_tonemapper_stevem"},
						{"6", "hdr10_tonemapper_uncharted2"},
						{"7", "hdr10_tonemapper_reinhard1"},
						{"8", "hdr10_tonemapper_reinhard2"},
					}
					end
				},
				cmd = "r4_hdr10_tonemapper",
			},
			{
				id = "hdr10_tonemap_mode",
				tag = "hdr10",
				type = "list",
				val = 0,
				curr = {function() return get_console_cmd(0, "r4_hdr10_tonemap_mode") end},
				content = {function() return {{"0", "hdr10_tonemap_mode_luminance"}, {"1", "hdr10_tonemap_mode_color"}} end},
				cmd = "r4_hdr10_tonemap_mode",
			},
			{
				id = "hdr10_brightness",
				tag = "hdr10",
				type = "track",
				val = 2,
				def = 0.0,
				min = -1,
				max = 1,
				step = 0.001,
				cmd = "r4_hdr10_brightness",
			},
			{
				id = "hdr10_gamma",
				tag = "hdr10",
				type = "track",
				val = 2,
				def = 1.1,
				min = 0.1,
				max = 5,
				step = 0.01,
				cmd = "r4_hdr10_gamma",	
			},
			{
				id = "hdr10_exposure",
				tag = "hdr10",
				type = "track",
				val = 2,
				def = 0.8,
				min = 0.1,
				max = 30,
				step = 0.05,
				cmd = "r4_hdr10_exposure",
			},
			{
				id = "hdr10_contrast",
				tag = "hdr10",
				type = "track",
				val = 2,
				def = 0.0,
				min = -1,
				max = 1,
				step = 0.01,
				cmd = "r4_hdr10_contrast",
			},
			{
				id = "hdr10_contrast_middle_gray",
				tag = "hdr10",
				type = "track",
				val = 2,
				def = 0.5,
				min = 0,
				max = 2,
				step = 0.01,
				cmd = "r4_hdr10_contrast_middle_gray",
			},
			{
				id = "hdr10_saturation",
				tag = "hdr10",
				type = "track",
				val = 2,
				def = 0.1,
				min = -1,
				max = 1,
				step = 0.01,
				cmd = "r4_hdr10_saturation",
			},
			{
				id = "hdr10_ui_saturation",
				tag = "hdr10",
				type = "track",
				val = 2,
				def = 0.5,
				min = -1,
				max = 1,
				step = 0.01,
				cmd = "r4_hdr10_ui_saturation",
			},
			{
				id = "hdr10_bloom_on",
				tag = "hdr10",
				type = "list",
				val = 0,
				curr = {function() return get_console_cmd(0, "r4_hdr10_bloom_on") end},
				content = {function() return {{"1", "ON"}, {"0", "OFF"}} end},
				cmd = "r4_hdr10_bloom_on",
			},
			{
				id = "hdr10_bloom_blur_passes",
				tag = "hdr10",
				type = "track",
				val = 2,
				def = 20,
				min = 1,
				max = 32,
				step = 1,
				cmd = "r4_hdr10_bloom_blur_passes",
			},
			{
				id = "hdr10_bloom_blur_scale",
				tag = "hdr10",
				type = "track",
				val = 2,
				def = 1.0,
				min = 0,
				max = 1,
				step = 0.01,
				cmd = "r4_hdr10_bloom_blur_scale",
			},
			{
				id = "hdr10_bloom_intensity",
				tag = "hdr10",
				type = "track",
				val = 2,
				def = 0.06,
				min = 0,
				max = 1,
				step = 0.01,
				cmd = "r4_hdr10_bloom_intensity",
			},
			{
				id = "hdr10_flare_on",
				tag = "hdr10",
				type = "list",
				val = 0,
				curr = {function() return get_console_cmd(0, "r4_hdr10_flare_on") end},
				content = {function() return {{"1", "ON"}, {"0", "OFF"}} end},
				cmd = "r4_hdr10_flare_on",
			},
			{
				id = "hdr10_flare_threshold",
				tag = "hdr10",
				type = "track",
				val = 2,
				def = 0,
				min = 0,
				max = 10,
				step = 0.1,
				cmd = "r4_hdr10_flare_threshold",
			},
			{
				id = "hdr10_flare_power",
				tag = "hdr10",
				type = "track",
				val = 2,
				def = 0.04,
				min = 0,
				max = 5,
				step = 0.01,
				cmd = "r4_hdr10_flare_power",
			},
			{
				id = "hdr10_flare_ghosts",
				tag = "hdr10",
				type = "track",
				val = 2,
				def = 1,
				min = 0,
				max = 10,
				step = 1,
				cmd = "r4_hdr10_flare_ghosts",
			},
			{
				id = "hdr10_flare_ghost_dispersal",
				tag = "hdr10",
				type = "track",
				val = 2,
				def = 0.6,
				min = 0.01,
				max = 5.0,
				step = 0.01,
				cmd = "r4_hdr10_flare_ghost_dispersal",
			},
			{
				id = "hdr10_flare_center_falloff",
				tag = "hdr10",
				type = "track",
				val = 2,
				def = 1.1,
				min = 0.1,
				max = 10,
				step = 0.1,
				cmd = "r4_hdr10_flare_center_falloff",
			},
			{
				id = "hdr10_flare_halo_scale",
				tag = "hdr10",
				type = "track",
				val = 2,
				def = 0.47,
				min = 0.01,
				max = 5.0,
				step = 0.01,
				cmd = "r4_hdr10_flare_halo_scale",
			},
			{
				id = "hdr10_flare_halo_ca",
				tag = "hdr10",
				type = "track",
				val = 2,
				def = 10.0,
				min = 0.0,
				max = 20.0,
				step = 0.1,
				cmd = "r4_hdr10_flare_halo_ca",
			},
			{
				id = "hdr10_flare_ghost_ca",
				tag = "hdr10",
				type = "track",
				val = 2,
				def = 3.0,
				min = 0.0,
				max = 20.0,
				step = 0.1,
				cmd = "r4_hdr10_flare_ghost_ca",
			},
			{
				id = "hdr10_flare_blur_passes",
				tag = "hdr10",
				type = "track",
				val = 2,
				def = 12,
				min = 1,
				max = 32,
				step = 1,
				cmd = "r4_hdr10_flare_blur_passes",
			},
			{
				id = "hdr10_flare_blur_scale",
				tag = "hdr10",
				type = "track",
				val = 2,
				def = 1.0,
				min = 0.0,
				max = 1.0,
				step = 0.01,
				cmd = "r4_hdr10_flare_blur_scale",
			},
			{
				id = "hdr10_flare_ghost_intensity",
				tag = "hdr10",
				type = "track",
				val = 2,
				def = 0.04,
				min = 0.0,
				max = 1.0,
				step = 0.01,
				cmd = "r4_hdr10_flare_ghost_intensity",
			},
			{
				id = "hdr10_flare_halo_intensity",
				tag = "hdr10",
				type = "track",
				val = 2,
				def = 0.04,
				min = 0.0,
				max = 1.0,
				step = 0.01,
				cmd = "r4_hdr10_flare_halo_intensity",
			},
			{
				id = "hdr10_sun_on",
				tag = "hdr10",
				type = "list",
				val = 0,
				curr = {function() return get_console_cmd(0, "r4_hdr10_sun_on") end},
				content = {function() return {{"1", "ON"}, {"0", "OFF"}} end},
				cmd = "r4_hdr10_sun_on",
			},
			{
				id = "hdr10_sun_intensity",
				tag = "hdr10",
				type = "track",
				val = 2,
				def = 80.0,
				min = 1.0,
				max = 100.0,
				step = 1.0,
				cmd = "r4_hdr10_sun_intensity",
			},
			{
				id = "hdr10_sun_inner_radius",
				tag = "hdr10",
				type = "track",
				val = 2,
				def = 0.2,
				min = 0.01,
				max = 1.0,
				step = 0.01,
				cmd = "r4_hdr10_sun_inner_radius",
			},
			{
				id = "hdr10_sun_outer_radius",
				tag = "hdr10",
				type = "track",
				val = 2,
				def = 0.4,
				min = 0.01,
				max = 1.0,
				step = 0.01,
				cmd = "r4_hdr10_sun_outer_radius",
			},

			{ id = "divider", type = "line" },

			-- Debug
			{
				id = "string_table_error_msg",
				type = "list",
				val = 0,
				curr = {function() return get_console_cmd(0, "string_table_error_msg") end},
				content = {function() return {{"1", "ON"}, {"0", "OFF"}} end},
				cmd = "string_table_error_msg",
			},
			{
				id = "log_timestamps",
				type = "list",
				val = 0,
				curr = {function() return get_console_cmd(0, "log_timestamps") end},
				content = {function() return {{"1", "ON"}, {"0", "OFF"}} end},
				cmd = "log_timestamps",
			},
			{
				id = "print_bone_warnings",
				type = "list",
				val = 0,
				curr = {function() return get_console_cmd(0, "print_bone_warnings") end},
				content = {function() return {{"1", "ON"}, {"0", "OFF"}} end},
				cmd = "print_bone_warnings",
			},
			{
				id = "lua_gcstep",
				type = "track",
				val = 2,
				def = 400,
				min = 1,
				max = 1000,
				step = 10,
				cmd = "lua_gcstep",
			},
			{
				id = "mouse_buffer_size",
				type = "track",
				val = 2,
				def = 1024,
				min = 64,
				max = 2048,
				step = 32,
				cmd = "mouse_buffer_size",
			},
			{
				id = "keyboard_buffer_size",
				type = "track",
				val = 2,
				def = 128,
				min = 64,
				max = 512,
				step = 32,
				cmd = "keyboard_buffer_size",
			},
		},
	}

	table.insert(ui_options.options, options)

    function level_present()
        return level.present()
    end

    function start_hdr_live_editing_ui(self)
        self:On_Cancel()
        start()
    end

    local precision = 3

    local hdr_live_editing_commands = (function()
    	local t = {}

    	for i, v in ipairs(options.gr) do
    		if v.tag and v.tag == "hdr10" then
    			t[#t + 1] = v
    		end
    	end

    	return t
	end)()

    HDRLiveEditingGUI = nil -- instance, don't touch
    function start()
        exec_console_cmd("main_menu off")
            
        if not HDRLiveEditingGUI then
            HDRLiveEditingGUI = HDRLiveEditingControl()
        end

        if HDRLiveEditingGUI and not HDRLiveEditingGUI:IsShown() then
            HDRLiveEditingGUI:ShowDialog(true)
            Register_UI("HDRLiveEditingControl","ui_options_modded_exes")
        end
    end

    -------------------------------------------------------------------
    class "HDRLiveEditingControl" (CUIScriptWnd)

    function HDRLiveEditingControl:__init() super()
        self:InitControls()
        RegisterScriptCallback("actor_on_net_destroy", self)
    end

    function HDRLiveEditingControl:__finalize()
    end

    function HDRLiveEditingControl:actor_on_net_destroy()
        self:Close()
        HDRLiveEditingGUI = nil
    end

    function HDRLiveEditingControl:InitControls()
        self:SetWndRect         (Frect():set(0,0,1024,768))
        self:SetAutoDelete(true)
        
        self.xml = CScriptXmlInit()
        
        local xml = self.xml
        xml:ParseFile           ("ui_options.xml")
        
        self.dialog = xml:InitStatic("ctrl_lighting", self)
        self.dialog:SetWndPos(vector2():set(self.dialog:GetWndPos().x, 400))
        self.dialog:SetWndSize(vector2():set(self.dialog:GetWidth(), 300))
        
        self.frame = xml:InitFrame("ctrl_lighting:frame", self.dialog)
        self.frame:SetWndSize(vector2():set(self.frame:GetWidth(), 300))

        local cap = xml:InitStatic("ctrl_lighting:cap_main",self.dialog)
        cap:TextControl():SetText("Offsets")

        self.scroll = xml:InitScrollView("ctrl_lighting:scroll", self.dialog)
        self.scroll:SetWndSize(vector2():set(self.scroll:GetWidth(), 225))
        self.scroll:Clear()
        
        self.Track = {}
        self.Value = {}
        self.Num = {}
        for i=1, #hdr_live_editing_commands do
            local _st = xml:InitStatic("ctrl_lighting:st", nil)
            
            local tbl = hdr_live_editing_commands[i]
            local name = tbl.id

            local value = get_console_cmd(0, tbl.cmd)
            local string_value = value
            if tbl.val == 0 then
            	value = tonumber(value)
            elseif tbl.val == 1 then
            	if value == "true" or value == "1" then
            		value = true
            	else
            		value = false
            	end
            elseif tbl.val == 2 then
            	value = tonumber(value)
            end

            local cap = xml:InitStatic("ctrl_lighting:cap", _st)
            cap:TextControl():SetText(game.translate_string(("ui_mm_modded_exes_%s"):format(name)))

            local function getMinOrMax(min)
            	if tbl.type == "track" then
            		return min and tbl.min or tbl.max
            	elseif tbl.type == "list" then
            		local t = tbl.content[1]()
            		table.sort(t, function(a, b)
            			if min then return tonumber(a[1]) < tonumber(b[1]) end
            			return tonumber(a[1]) > tonumber(b[1])
            		end)
            		return t[1][1]
            	end
            end

            local step = tbl.type == "track" and tbl.step or 1
            local min = getMinOrMax(true)
            local max = getMinOrMax()
            local val = tonumber(value)

            self.Track[i] = xml:InitTrackBar("ctrl_lighting:track", _st)
            self.Track[i]:SetStep(step)
            self.Track[i]:SetOptFBounds(min, max)
            self.Track[i]:SetFValue(val)
            self.Value[i] = val
            self.Num[i] = xml:InitTextWnd("ctrl_lighting:num", _st)

            local display_text = val
            if tbl.type == "list" then
            	for k, v in pairs(tbl.content[1]()) do
            		if v[1] == string_value then
            			display_text = game.translate_string(("ui_mm_lst_%s"):format(v[2]))
            			break
            		end
            	end
            end
            self.Num[i]:SetText(display_text)
            
            self.scroll:AddWindow(_st, true)
            _st:SetAutoDelete(true)
        end
    end

    function HDRLiveEditingControl:Callback_Track(i, val)
        local cmd = hdr_live_editing_commands[i].cmd
        local res = ("%s %s"):format(cmd, val)
        exec_console_cmd(res)
        printf(res)

        local display_text = val

        local tbl = hdr_live_editing_commands[i]
        if tbl.type == "list" then
        	for k, v in pairs(tbl.content[1]()) do
        		if v[1] == tostring(val) then
        			display_text = game.translate_string(("ui_mm_lst_%s"):format(v[2]))
					break
        		end
        	end
        end

        self.Num[i]:SetText(display_text)
    end

    function HDRLiveEditingControl:Update()
        CUIScriptWnd.Update(self)
        
        -- Hack to simulate tracing method for TrackBar value changes. TODO: add callback support for CUITrackBar in engine, this is just silly
        for i,ctrl in pairs(self.Track) do
            if ctrl:IsCursorOverWindow() then
                local val = round_idp(ctrl:GetFValue(), precision)
                if (val ~= self.Value[i]) then
                    self.Value[i] = val
                    self:Callback_Track(i, val)
                    return
                end
            end
        end
    end

    function HDRLiveEditingControl:OnKeyboard(dik, keyboard_action)
        local res = CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
        if (res == false) then
            local bind = dik_to_bind(dik)
            if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
            
                if dik == DIK_keys.DIK_ESCAPE then
                    self:Close()
                end

            end
        end

        return res
    end

    function HDRLiveEditingControl:Close()
        self:HideDialog()
        self:Show(false)

        Unregister_UI("HDRLiveEditingControl")
        HDRLiveEditingGUI = nil
    end
end

function on_xml_read()
	ui_options_base = ui_options.init_opt_base
	ui_options.init_opt_base = function()
		ui_options_base()
		init_opt_base()
	end
	ui_options.init_opt_base()
end
